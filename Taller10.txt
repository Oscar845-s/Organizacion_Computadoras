shl:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 8 ; AL = 224 (antes de la rotación)
shl al, 3 ;al
inc al
; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline

mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80
SHR:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 130 ; AL = 224 (antes de la rotación)
shr al, 1

; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte

int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

ROR:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 130 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROR al, 1

; Guardar en char

mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

ROL:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos

mov al, 130 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROL al, 7

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

SHL:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 24 ; AL = 224 (antes de la rotación)
shl al, 1 ;al

; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline

mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80
SHR:

section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 96 ; AL = 224 (antes de la rotación)
shr al, 1

; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char

mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

ROR:
ROR:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 3 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROR al, 4

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80
ROL:
section .data
char db 0
newline db 10

section .text
global _start

_start:

; Sumar dos números distintos
mov al, 3 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROL al, 4

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

shl:
section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 51 ; AL = 224 (antes de la rotación)
shl al, 1 ;al
inc al
; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline

mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80

SHR:

section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 206 ; AL = 224 (antes de la rotación)
shr al, 1

; Rotar a la derecha (ROR)

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout

mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80
ROR:

section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 206 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROR al, 1

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80
ROL:

section .data
char db 0
newline db 10

section .text
global _start

_start:
; Sumar dos números distintos
mov al, 206 ; AL = 224 (antes de la rotación)

; Rotar a la derecha (ROR)
ROL al, 7

; Guardar en char
mov [char], al

; Escribir carácter en consola
mov eax, 4 ; syscall write
mov ebx, 1 ; stdout
mov ecx, char
mov edx, 1 ; 1 byte
int 0x80

; Salto de línea
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 0x80

; Salir
mov eax, 1 ; syscall exit
xor ebx, ebx ; código de salida 0
int 0x80